-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS "Cuentas"."UsuarioEED"
(
    "idUsuarioEED" integer NOT NULL,
    "cedulaRUC" character varying(20) NOT NULL,
    nombre character varying,
    "fechaNacimiento" date,
    "beneficioTerceraEdad" boolean,
    publico boolean,
    PRIMARY KEY ("idUsuarioEED")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Cuentas"."UsuarioEED"
    IS 'Usuario de las Empresas Electricas de Distribucion ';

CREATE TABLE IF NOT EXISTS "Cuentas"."GrupoConsumo"
(
    "idGrupoConsumo" smallint NOT NULL,
    descripcion character varying(20) NOT NULL,
    PRIMARY KEY ("idGrupoConsumo")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Cuentas"."GrupoConsumo"
    IS 'Lista de los grupos de consumo disponibles';

CREATE TABLE IF NOT EXISTS "Cuentas"."Tarifa"
(
    "codigoTarifa" character(8) NOT NULL,
    descripcion character varying NOT NULL,
    "nivelVoltaje" character varying(5) NOT NULL,
    "idGrupoConsumo" smallint NOT NULL,
    PRIMARY KEY ("codigoTarifa")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Cuentas"."Tarifa"
    IS 'Lista de las tarifas disponibles';

CREATE TABLE IF NOT EXISTS "Cuentas"."Cuenta"
(
    "cuentaContrato" character varying(20) NOT NULL,
    "codigoEmpresa" smallint NOT NULL,
    "cuentaSuministro" character varying(20),
    "idUsuarioEED" integer[] NOT NULL,
    PRIMARY KEY ("cuentaContrato")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Cuentas"."Cuenta"
    IS 'Informacion de la cuenta de un usuario, cuenta contrato y cuenta suministro';

CREATE TABLE IF NOT EXISTS "Cuentas"."CuentaTarifa"
(
    "cuentaContrato" character varying(20) NOT NULL,
    "codigoTarifa" character(8) NOT NULL,
    "fechaContrato" date NOT NULL,
    PRIMARY KEY ("cuentaContrato", "codigoTarifa", "fechaContrato")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Cuentas"."CuentaTarifa"
    IS 'Tabla inteermedia entre Cuentas y Tarifa';

CREATE TABLE IF NOT EXISTS "Medidores"."Instalacion"
(
    "CUEN" character varying(20) NOT NULL,
    "ultimoMedidor" character varying(20),
    PRIMARY KEY ("CUEN")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Medidores"."Instalacion"
    IS 'Descripcion de la instalacion de un medidor';

CREATE TABLE IF NOT EXISTS "Medidores"."TipoMedidor"
(
    "codigoTipoMedidor" smallint,
    descripcion character varying(20)
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Medidores"."TipoMedidor"
    IS 'Descripcion de los tipos de medidor disponibles';

CREATE TABLE IF NOT EXISTS "Medidores"."Medidor"
(
    "numeroMedidor" character varying(20) NOT NULL,
    "idEmpresa" smallint NOT NULL,
    "codigoTipoMedidor" smallint NOT NULL,
    PRIMARY KEY ("numeroMedidor", "idEmpresa")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Medidores"."Medidor"
    IS 'Contiene informacion del medidor';

CREATE TABLE IF NOT EXISTS "Medidores"."InstalacionMedidor"
(
    "CUEN" character varying(20) NOT NULL,
    "idMedidor" integer NOT NULL,
    "idEmpresa" smallint NOT NULL,
    "fechaInstalacion" date NOT NULL,
    PRIMARY KEY ("CUEN", "idMedidor", "idEmpresa")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Medidores"."InstalacionMedidor"
    IS 'Relacion entre la instalacion de un medidor y el propio medidor';

CREATE TABLE IF NOT EXISTS "Empresas"."Empresa"
(
    "idEmpresa" smallint NOT NULL,
    nombre character varying(30) NOT NULL,
    PRIMARY KEY ("idEmpresa")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Empresas"."Empresa"
    IS 'Listado de las empresas electricas de distribucion';

CREATE TABLE IF NOT EXISTS "Empresas"."LugarGeografico"
(
    "idLugarGeografico" character varying(6) NOT NULL,
    nombre character varying(50) NOT NULL,
    "idLugarGeograficoPadre" character varying(4),
    PRIMARY KEY ("idLugarGeograficoPadre")
)
WITH (
    OIDS = FALSE
);

CREATE TABLE IF NOT EXISTS "Empresas"."LugarGeograficoEmpresa"
(
    "idEmpresa" smallint NOT NULL,
    "idLugarGeografico" character varying(6) NOT NULL,
    PRIMARY KEY ("idLugarGeografico", "idEmpresa")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Empresas"."LugarGeograficoEmpresa"
    IS 'Tabla intermedia que relaciona a las empresas con los lugares geograficos';

CREATE TABLE IF NOT EXISTS "Lecturas"."Lectura"
(
    "idLectura" bigint NOT NULL,
    "fechaInicioPeriodoLectura" date,
    "fechaFinPeriodoLectura" date,
    "periodoLectura" character varying(6),
    "lecturaAnterior" numeric,
    "lecturaActual" numeric,
    "consumoEED" numeric,
    "consumoCalculado" numeric,
    "diferenciaConsumoEED_Calculado" numeric,
    reactiva numeric,
    "MRU" character(20)[],
    "codigoNotaLectura" character varying(4) NOT NULL,
    "idDocumento" bigint NOT NULL
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Lecturas"."Lectura"
    IS 'Descripcio de las lecturas';

CREATE TABLE IF NOT EXISTS "Lecturas"."DemandaHoraria"
(
    "idLectura" bigint NOT NULL,
    energia7a22 numeric,
    energia22a7 numeric,
    PRIMARY KEY ("idLectura")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Lecturas"."DemandaHoraria"
    IS 'Campos relacionados a lectura solo para demanda horaria';

CREATE TABLE IF NOT EXISTS "Lecturas"."DemandaHorariaDiferenciada"
(
    "idLectura" bigint NOT NULL,
    "energiaA" numeric,
    "energiaB" numeric,
    "energiaC" numeric,
    "energiaD" numeric,
    PRIMARY KEY ("idLectura")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Lecturas"."DemandaHorariaDiferenciada"
    IS 'Informacion relacionada con la lectura para demanda horaria diferenciada';

CREATE TABLE IF NOT EXISTS "Lecturas"."Demanda"
(
    "idLectura" bigint NOT NULL,
    "demandaMaxima" numeric,
    "demandaFacturable" numeric,
    "demandaPico" numeric,
    "factorCorreccion" numeric,
    "factorPotencia" numeric,
    PRIMARY KEY ("idLectura")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Lecturas"."Demanda"
    IS 'Informacion relacionada con lecturas para la demanda';

CREATE TABLE IF NOT EXISTS "Lecturas"."ResidencialPEC"
(
    "idLectura" bigint NOT NULL,
    "lineaBase" numeric,
    "energiaSubsidiada" numeric,
    "codigoEquipamiento" smallint NOT NULL,
    PRIMARY KEY ("idLectura")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Lecturas"."ResidencialPEC"
    IS 'Descripcion de lecturas para aquellas que sean de tipo ResidencialPEC';

CREATE TABLE IF NOT EXISTS "Lecturas"."Equipamiento"
(
    "codigoEquipamiento" smallint NOT NULL,
    descripcion character varying(50) NOT NULL,
    PRIMARY KEY ("codigoEquipamiento")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Lecturas"."Equipamiento"
    IS 'Descripcion de los equipamientos disponibles';

CREATE TABLE IF NOT EXISTS "Documentos"."Documento"
(
    "idDocumento" bigint NOT NULL,
    "idEmpresa" smallint NOT NULL,
    mes smallint NOT NULL,
    anio smallint NOT NULL,
    "fechaEmision" date,
    "fechaVencimiento" date,
    "documentoModificado" bigint,
    "energiaElectrica" numeric,
    "cargoPorDemanda" numeric,
    "penalizacionBajoFactorPotencia" numeric,
    "subsidioCruzado-" numeric,
    "subsidioCruzado+" numeric,
    "subsidioPorTerceraEdad" numeric,
    "subsidioPorDiscapacidad" numeric,
    "subsidioPorTarifaDignidad" numeric,
    comercializacion numeric,
    "totalFacturacionSPEE" numeric,
    "corteReconexion" numeric,
    "interesMora" numeric,
    multas numeric,
    "otrosRubrosFacturados" numeric,
    "SAPG" numeric,
    "tasaRecoleccionBasura" numeric,
    "tasaBomberos" numeric,
    "numeroDocumento" bigint NOT NULL,
    "idTipoDocumento" smallint NOT NULL,
    "CUEN" character varying(20) NOT NULL,
    "cuentaContrato" character varying(20) NOT NULL,
    PRIMARY KEY ("idDocumento")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Documentos"."Documento"
    IS 'Descripcion de los documentos';

CREATE TABLE IF NOT EXISTS "Documentos"."Recaudacion"
(
    "idRecaudacion" bigint NOT NULL,
    "numeroDocumentoRecaudo" bigint NOT NULL,
    "numeroDocumentoRecaudado" bigint,
    "fechaEmisionDocumentoRecaudo" date,
    "fechaEmisionDocumentoRecaudado" date,
    "fechaRecaudacion" date,
    "horaRecaudacion" time without time zone,
    "tipoDocumentoRecaudado" smallint,
    "conveniosPago" numeric,
    "porSPEE" numeric,
    "porSAPG" numeric,
    "porCorteReconexion" numeric,
    "porOtrosRubros" numeric,
    "porTasaRecoleccionBasura" numeric,
    "porImpuestoBomberos" numeric,
    PRIMARY KEY ("idRecaudacion")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Documentos"."Recaudacion"
    IS 'Informacion sobre la recaudacion de los documentos';

CREATE TABLE IF NOT EXISTS "Documentos"."TipoDocumento"
(
    "idTipoDocumento" smallint,
    descripcion character varying(20)
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Documentos"."TipoDocumento"
    IS 'Lista de tipos de documentos disponibles';

CREATE TABLE IF NOT EXISTS "Cuentas"."RecuadoDocumento"
(
    "idDocumento" bigint NOT NULL,
    "idRecaudo" bigint NOT NULL,
    PRIMARY KEY ("idDocumento", "idRecaudo")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Cuentas"."RecuadoDocumento"
    IS 'Tabla intermedia de relacion entre recuados y documentos';

CREATE TABLE IF NOT EXISTS "Documentos"."DocumentoCuentaInstalacion"
(
    "cuentaContrato" character varying(20) NOT NULL,
    "CUEN" character varying(20) NOT NULL,
    PRIMARY KEY ("cuentaContrato", "CUEN")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Documentos"."DocumentoCuentaInstalacion"
    IS 'Tabla relacion entre un documento o reunion de lecturas, asi como con la cuenta de la persona y la instalacion de un medidor, de modo que se centre toda la informacion';

CREATE TABLE IF NOT EXISTS "Lecturas"."NotaLectura"
(
    "codigoNotaLectura" character varying(4) NOT NULL,
    descripcion character varying(30) NOT NULL,
    PRIMARY KEY ("codigoNotaLectura")
)
WITH (
    OIDS = FALSE
);

COMMENT ON TABLE "Lecturas"."NotaLectura"
    IS 'Lista con las notas de lectura disponibles';

ALTER TABLE IF EXISTS "Cuentas"."Tarifa"
    ADD FOREIGN KEY ("idGrupoConsumo")
    REFERENCES "Cuentas"."GrupoConsumo" (descripcion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Cuentas"."Cuenta"
    ADD FOREIGN KEY ("idUsuarioEED")
    REFERENCES "Cuentas"."UsuarioEED" ("idUsuarioEED") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Cuentas"."CuentaTarifa"
    ADD FOREIGN KEY ("cuentaContrato")
    REFERENCES "Cuentas"."Cuenta" ("cuentaContrato") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Cuentas"."CuentaTarifa"
    ADD FOREIGN KEY ("codigoTarifa")
    REFERENCES "Cuentas"."Tarifa" ("codigoTarifa") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Medidores"."Medidor"
    ADD FOREIGN KEY ("codigoTipoMedidor")
    REFERENCES "Medidores"."TipoMedidor" ("codigoTipoMedidor") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Medidores"."InstalacionMedidor"
    ADD FOREIGN KEY ("CUEN")
    REFERENCES "Medidores"."Instalacion" ("CUEN") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Medidores"."InstalacionMedidor"
    ADD FOREIGN KEY ("idMedidor")
    REFERENCES "Medidores"."Medidor" ("numeroMedidor") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Medidores"."InstalacionMedidor"
    ADD FOREIGN KEY ("idEmpresa")
    REFERENCES "Medidores"."Medidor" ("idEmpresa") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Empresas"."LugarGeografico"
    ADD FOREIGN KEY ("idLugarGeograficoPadre")
    REFERENCES "Empresas"."LugarGeografico" ("idLugarGeografico") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Empresas"."LugarGeograficoEmpresa"
    ADD FOREIGN KEY ("idEmpresa")
    REFERENCES "Empresas"."Empresa" ("idEmpresa") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Empresas"."LugarGeograficoEmpresa"
    ADD FOREIGN KEY ("idLugarGeografico")
    REFERENCES "Empresas"."LugarGeografico" ("idLugarGeografico") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Lecturas"."Lectura"
    ADD FOREIGN KEY ("idDocumento")
    REFERENCES "Documentos"."Documento" ("idDocumento") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Lecturas"."Lectura"
    ADD FOREIGN KEY ("codigoNotaLectura")
    REFERENCES "Lecturas"."NotaLectura" ("codigoNotaLectura") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Lecturas"."ResidencialPEC"
    ADD FOREIGN KEY ("codigoEquipamiento")
    REFERENCES "Lecturas"."Equipamiento" ("codigoEquipamiento") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Documentos"."Documento"
    ADD FOREIGN KEY ("idTipoDocumento")
    REFERENCES "Documentos"."TipoDocumento" ("idTipoDocumento") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Documentos"."Documento"
    ADD FOREIGN KEY ("CUEN")
    REFERENCES "Medidores"."Instalacion" ("CUEN") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Documentos"."Documento"
    ADD FOREIGN KEY ("cuentaContrato")
    REFERENCES "Cuentas"."Cuenta" ("cuentaContrato") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Documentos"."Recaudacion"
    ADD FOREIGN KEY ("tipoDocumentoRecaudado")
    REFERENCES "Documentos"."TipoDocumento" ("idTipoDocumento") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Cuentas"."RecuadoDocumento"
    ADD FOREIGN KEY ("idDocumento")
    REFERENCES "Documentos"."Documento" ("idDocumento") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS "Cuentas"."RecuadoDocumento"
    ADD FOREIGN KEY ("idRecaudo")
    REFERENCES "Documentos"."Recaudacion" ("idRecaudacion") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;